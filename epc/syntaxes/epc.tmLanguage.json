{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "EibPC",
  "patterns": [
    {
      "include": "#expression"
    },
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "literal": {
      "name": "literal.epc",
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#reserved-literal"
        },
        {
          "include": "ip-literal"
        }
      ]
    },
    "expression": {
      "name": "meta.expression.sqf",
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#paren-expression"
        },
        {
          "include": "#block"
        },
        {
          "include": "#comparison-operator"
        },
        {
          "include": "#condition-operator"
        },
        {
          "include": "#manipulative-operator"
        },
        {
          "include": "#assignment-operator"
        },
        {
          "include": "#control-statement"
        },
        {
          "include": "#code-managers"
        },
        {
          "include": "#statements"
        },
        {
          "include": "#other"
        },
        {
          "include": "#declaration"
        }
      ]
    },
    "manipulative-operator": {
      "match": "\\*|/|\\-|\\+|%|\\^|plus|\\%",
      "name": "keyword.operator.manipulative.epc"
    },
    "null-literal": {
      "match": "\\b(null)\\b",
      "name": "constant.language.null.epc"
    },
    "ip-literal": {
      "match": "\\s*(?<=[^$])(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\)\\b",
      "name": "constant.ip.epc"
    },
    "numeric-literal": {
      "match": "\\s*(?<=[^$])([0-9]+(\\.[0-9]+)?))([uf]\\d{1,3})\\b",
      "name": "constant.gadata.epc"
    },
    "": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.paren.epc"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.paren.epc"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "qstring-double": {
      "begin": "\"",
      "end": "\"",
      "name": "string.double.epc"
    },
    "qstring-single": {
      "begin": "'",
      "end": "'",
      "name": "string.single.epc"
    },
    "qstring-single": {
      "begin": "$",
      "end": "$",
      "name": "string.single.epc"
    },
    "string": {
      "name": "string.epc",
      "patterns": [
        {
          "include": "#qstring-double"
        }
      ]
    },
    "reserved-literal": {
      "match": "\\s*(?i)([VPN])\\b",
      "name": "variable.language.reserved.epc"
    },
    "block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.epc"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.epc"
        }
      },
      "name": "meta.block.epc",
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#object-member"
        }
      ]
    },
    "boolean-literal": {
      "match": "(\\s*)(false|true|EIN|AUS|ON|OFF)\\b",
      "name": "constant.language.boolean.epc"
    },
    "comment": {
      "name": "comment.epc",
      "patterns": [
        {
          "include": "#comment-block"
        },
        {
          "include": "#comment-line"
        }
      ]
    },
    "comment-block": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.epc"
    },
    "comment-line": {
      "match": "(//).*$\\n?",
      "name": "comment.line.epc"
    },
    "comparison-operator": {
      "match": "==|<>|>|<",
      "name": "keyword.operator.comparison.epc"
    },
    "condition-operator": {
      "match": "!|&&|\\|\\||:|([^A-Za-z0-9]|\\b)and([^A-Za-z0-9]|\\b)|([^A-Za-z0-9])or([^A-Za-z0-9])",
      "name": "keyword.operator.condition.epc"
    },
    "control-statement": {
      "match": "\\s*(?i)(then|else|if|endif)\\b",
      "name": "keyword.control.epc"
    },
    "statements": {
      "patterns": [
        {
          "name": "function.eibpc.epc",
          "match": "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s*\n(?:\n (on(?:write|stringformat|sendhtmlmail|[wch]time|readflashvar)\n)(?=\\s*\\()",
          "captures": {
						"1": {
							"name": "punctuation.accessor.epc"
						},
						"2": {
							"name": "support.function.epc"
						}
					}
        }
      ]
    }
  },
  "scopeName": "source.epc"
}
